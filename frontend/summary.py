# ‡∏´‡∏ô‡πâ‡∏≤ summary ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
"""
‡∏´‡∏ô‡πâ‡∏≤ Summary (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô) ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å /summary
‡πÉ‡∏ä‡πâ‡πÉ‡∏ô app.py: summary.render(api)
"""
from __future__ import annotations
import pandas as pd
import streamlit as st
from . import API

def _metric(value, label):
    if value is None:
        st.metric(label, "‚Äî")
    else:
        try:
            st.metric(label, f"{float(value):,.2f}")
        except Exception:
            st.metric(label, str(value))

def render(api: API):
    st.title("üìä Summary")
    period = st.selectbox("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["daily","weekly","monthly"], index=0)

    if st.button("Get Summary", type="primary"):
        try:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ..."):
                data = api.get_summary(period)  # {"total":..., "by_category":[...], "items":[...]}

            st.success("‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

            # Metrics
            colA, colB, colC = st.columns(3)
            with colA: _metric(data.get("total"), "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°")
            count_items = len(data.get("items") or [])
            with colB: _metric(count_items, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            avg = (float(data["total"])/count_items) if data.get("total") is not None and count_items else None
            with colC: _metric(avg, "‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

            st.divider()

            # By category
            st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà")
            by_cat = data.get("by_category") or []
            if by_cat:
                df_cat = pd.DataFrame(by_cat).rename(columns={
                    "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                    "amount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
                })
                st.dataframe(df_cat, use_container_width=True)
            else:
                st.caption("‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‚Äî")

            st.divider()

            # Latest items
            st.subheader("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            items = data.get("items") or []
            if items:
                df_items = pd.DataFrame(items).rename(columns={
                    "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
                    "merchant": "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
                    "amount": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
                    "category": "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
                    "total": "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°",
                })
                st.dataframe(df_items, use_container_width=True)
            else:
                st.caption("‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Äî")

        except Exception as e:
            st.error(f"‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
