# frontend/summary.py
import pandas as pd
import streamlit as st
import altair as alt


def render_summary_panel(query_summary, get_period_range) -> None:
    st.subheader("üìä Summary")

    # ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏™‡πÇ‡∏Ñ‡∏õ‡πÇ‡∏ó‡∏ô‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ CSS .summary-skin/.chart-card/.table-soft ‡πÉ‡∏ô inject_theme_css)
    st.markdown('<div class="summary-skin">', unsafe_allow_html=True)

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    period = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["daily", "weekly", "monthly"], index=2)

    # ‡∏ä‡πà‡∏≠‡∏á department ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ" (‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ö‡∏ô‡∏ó‡∏µ‡πà Upload)
    summary_dept = st.text_input(
        "department",
        key="summary_department",
        value=st.session_state.get("summary_department", ""),
        placeholder="‡πÄ‡∏ä‡πà‡∏ô finance/marketing/hr",
    )

    if st.button("Get Summary"):
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á None)
        df = query_summary(period, summary_dept or None)
        if df.empty:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ")
            st.markdown("</div>", unsafe_allow_html=True)
            return

        # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
        df["date"] = pd.to_datetime(df["date"], errors="coerce")
        df["total"] = pd.to_numeric(df["total"], errors="coerce").fillna(0)
        df = df.dropna(subset=["date"])

        # --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏° + ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
        total = float(df["total"].sum())
        start, end = get_period_range(period)
        st.write(f"‡∏ä‡πà‡∏ß‡∏á: {start} ‚Äì {end} | ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(df)}")
        st.metric("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (THB)", f"{total:,.2f}")

        # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ resample ---
        daily = (
            df.set_index("date")
            .resample("D")["total"]
            .sum()
            .rename("Total (THB)")
        )

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Altair
        df_plot = daily.reset_index().rename(columns={"date": "Date", "Total (THB)": "Total"})

        # --- ‡∏Å‡∏£‡∏≤‡∏ü Altair: ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á + ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤ ---
        if len(df_plot) <= 1:
            chart = (
                alt.Chart(df_plot)
                .mark_bar(
                    color="#d9a1ea",
                    size=36,  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
                    cornerRadiusTopLeft=6,
                    cornerRadiusTopRight=6,
                )
                .encode(
                    x=alt.X("yearmonthdate(Date):O", title=""),
                    y=alt.Y("Total:Q", title="‡∏£‡∏ß‡∏° (THB)"),
                    tooltip=[
                        alt.Tooltip("Date:T", title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"),
                        alt.Tooltip("Total:Q", title="‡∏£‡∏ß‡∏° (THB)", format=",.2f"),
                    ],
                )
            )
        else:
            chart = (
                alt.Chart(df_plot)
                .mark_line(point=True, stroke="#d9a1ea", strokeWidth=3)
                .encode(
                    x=alt.X("Date:T", title=""),
                    y=alt.Y("Total:Q", title="‡∏£‡∏ß‡∏° (THB)"),
                    tooltip=[
                        alt.Tooltip("Date:T", title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"),
                        alt.Tooltip("Total:Q", title="‡∏£‡∏ß‡∏° (THB)", format=",.2f"),
                    ],
                )
            )

        # ‡∏ó‡∏≥‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á + ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö view
        chart = (
            chart
            .configure(background='transparent')  # ‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
            .configure_view(
                fill='rgba(255, 240, 247, 0.75)',  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
                stroke=None
            )
            .configure_axis(
                gridColor='rgba(0,0,0,0.06)',
                domainColor='rgba(0,0,0,0.12)',
                labelColor='rgba(0,0,0,0.55)',
                titleColor='rgba(0,0,0,0.55)',
            )
        )

        # ‚úÖ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏´‡πà‡∏≠‡∏Å‡∏£‡∏≤‡∏ü
        st.markdown('<div class="chart-card">', unsafe_allow_html=True)
        st.altair_chart(chart, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

        # ‚úÖ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏´‡πà‡∏≠ DataFrame ‡πÉ‡∏´‡πâ‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á
        st.markdown('<div class="table-soft">', unsafe_allow_html=True)
        st.dataframe(df, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # ‡∏õ‡∏¥‡∏î‡∏™‡πÇ‡∏Ñ‡∏õ‡∏™‡πÑ‡∏ï‡∏•‡πå
    st.markdown("</div>", unsafe_allow_html=True)