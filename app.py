import os, base64, json
from datetime import datetime, timedelta
from dateutil import parser as dparse
import pandas as pd
import streamlit as st
from ocr_llm.llm_supabase import llm_query_supabase
from ocr_llm.ocr import vision_extract_json
from backend.supabase_client import save_to_supabase, query_summary, get_period_range
from sheets.summary import sheet_summary
# 1) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å set_page_config ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏µ output ‡πÉ‡∏î ‡πÜ)
st.set_page_config(page_title="üì∏ Receipt Bot", page_icon="üßæ", layout="centered")

st.title("üì∏ Receipt Bot")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí LLM Extract ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà Supabase ‚Üí ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ")

# ---------- UI: Upload ----------
st.subheader("üì• Upload")
col1, col2 = st.columns([2,1])
with col1:
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", type=["jpg","jpeg","png","webp"])
with col2:
    user_id = st.text_input("User ID", value="") # must edit ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô requester_user_id

if uploaded:
    st.image(uploaded, caption="Uploaded Receipt", use_column_width=True)
    if st.button("Process Receipt"):
        try:
            with st.spinner("Extracting with GPT-4o..."):
                data = vision_extract_json(uploaded.getvalue(), uploaded.type)
                data["user_id"] = user_id
            st.session_state["pending_receipt"] = data
            st.success("‚úÖ Extracted")
            st.subheader("üìë Extracted Data")
            st.json(data)
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î JSON ‡πÑ‡∏î‡πâ: {e}")

            """
                ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ + ‡πÉ‡∏™‡πà user_id (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

                ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ preview

                ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Process:

                ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å vision_extract_json(...)

                ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô st.session_state["pending_receipt"] (‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏° interaction ‡πÑ‡∏î‡πâ)

                ‡πÇ‡∏ä‡∏ß‡πå JSON ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                            """

# ---------- UI: Confirm & Save ----------
st.subheader("‚úÖ Confirm & Save")
pending = st.session_state.get("pending_receipt")
if not pending:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏Å‡∏î Process ‡∏Å‡πà‡∏≠‡∏ô)")
else:
    # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    edited_total = st.number_input("total", value=float(pending.get("total", 0) or 0.0))
    pending["total"] = edited_total
    if st.button("Save to Supabase"):
        ok = save_to_supabase(pending)
        if ok:
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà Supabase")
            st.session_state.pop("pending_receipt", None)
        else:
            st.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏£‡∏≤‡∏á/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô Supabase")
        sheet_summary()
    

# ---------- UI: Summary ----------
st.subheader("üìä Summary")
period = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["daily", "weekly", "monthly"], index=2)
filter_user = st.text_input("Filter user_id (optional)", value="")
if st.button("Get Summary"):
    df = query_summary(period, filter_user or None)
    if df.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ")
    else:
        total = float(df["total"].sum()) if "total" in df.columns else 0.0
        start, end = get_period_range(period)
        st.write(f"‡∏ä‡πà‡∏ß‡∏á: {start} ‚Äì {end} | ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(df)}")
        st.metric("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (THB)", f"{total:,.2f}")
        if "date" in df.columns and "total" in df.columns:
            df["date"]  = pd.to_datetime(df["date"], errors="coerce")   # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ISO ‡∏ó‡∏µ‡πà‡∏°‡∏µ Z/‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ ‡∏à‡∏∞ parse ‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á
            df["total"] = pd.to_numeric(df["total"], errors="coerce").fillna(0)

            # ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (NaT)
            df = df.dropna(subset=["date"])

            # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ---
            daily = df.groupby(df["date"].dt.date)["total"].sum().sort_index()
            st.line_chart(daily)
        st.dataframe(df)

st.subheader("üí¨ Ask about sales")
query_text = st.text_input("‡∏ñ‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ / ‡∏™‡∏£‡∏∏‡∏õ")
if st.button("Ask LLM"):
    if query_text:
        resp = llm_query_supabase(query_text)
        st.write(resp)