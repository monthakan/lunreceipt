# import streamlit as st
# # backend/services.py
# from sheets.sheets import save_receipt, get_summary_sheet
# from backend.services import process_receipt, save_to_sheet, get_summary

# st.title("üì∏ Receipt Bot")
# st.write("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ OCR + LLM + ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Google Sheets")

# uploaded_file = st.file_uploader("Upload Receipt", type=["jpg", "jpeg", "png"]) # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

# if uploaded_file:
#     st.image(uploaded_file, caption="Uploaded Receipt", use_column_width=True)

#     if st.button("Process Receipt"):
#         with st.spinner("Processing..."):
#             data = process_receipt(uploaded_file) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô OCR + LLM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à

#         st.subheader("üìë Extracted Data")
#         st.json(data)

#         if st.button("Save to Google Sheets"): # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Google Sheets
#             save_to_sheet(data)
#             st.success("‚úÖ Saved to Google Sheets")

# st.subheader("üìä Summary")
# period = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["daily", "weekly", "monthly"])
# if st.button("Get Summary"):
#     summary = get_summary(period)  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å Google Sheets (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
#     st.write(summary)
# app.py ‚Äî Streamlit + OpenAI Vision + Supabase (‡πÅ‡∏ó‡∏ô Google Sheets)





import os, base64, json
from datetime import datetime, timedelta
from dateutil import parser as dparse
import pandas as pd
import streamlit as st
from supabase import create_client
from openai import OpenAI   # << ‡πÉ‡∏ä‡πâ‡πÑ‡∏ß‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå SDK v1

# 1) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å set_page_config ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏µ output ‡πÉ‡∏î ‡πÜ)
st.set_page_config(page_title="üì∏ Receipt Bot", page_icon="üßæ", layout="centered")

# 2) ‡πÇ‡∏´‡∏•‡∏î secrets/ENV ‡πÅ‡∏ö‡∏ö fallback (‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á local ‡πÅ‡∏•‡∏∞ Streamlit Cloud)
def S(key, default=None):
    return (st.secrets.get(key) if key in st.secrets else os.getenv(key, default))

OPENAI_API_KEY = S("OPENAI_API_KEY")
SUPABASE_URL = S("SUPABASE_URL")
SUPABASE_SERVICE_KEY = S("SUPABASE_SERVICE_KEY")

if not (OPENAI_API_KEY and SUPABASE_URL and SUPABASE_SERVICE_KEY):
    st.error("Missing secrets: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENAI_API_KEY, SUPABASE_URL, SUPABASE_SERVICE_KEY")
    st.stop()

# 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á clients
client = OpenAI(api_key=OPENAI_API_KEY)
sb = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)

st.title("üì∏ Receipt Bot")
st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí LLM Extract ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà Supabase ‚Üí ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ")

# 4) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Vision ‚Üí JSON (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö openai==1.44.0)
def vision_extract_json(file_bytes: bytes, mime: str) -> dict:
    """‡πÉ‡∏´‡πâ GPT-4o ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô JSON ‡∏ï‡∏≤‡∏°‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤"""
    if not mime:
        mime = "image/png"
    b64 = base64.b64encode(file_bytes).decode()
    data_url = f"data:{mime};base64,{b64}"

    prompt = (
        "You are a receipt parser for Thai receipts. "
        "Extract STRICT JSON with keys: vendor, date (YYYY-MM-DD), "
        "items[{name, qty, unit_price}], subtotal, tax, total, currency. "
        "Return ONLY JSON (no markdown/prose)."
    )

    resp = client.chat.completions.create(   # << new SDK call
        model="gpt-4o-mini",
        temperature=0,
        messages=[{
            "role": "user",
            "content": [
                {"type": "text", "text": prompt},
                {"type": "image_url", "image_url": {"url": data_url}}
            ]
        }]
    )

    raw = resp.choices[0].message.content
    # ‡∏ö‡∏≤‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô ‡πÜ; ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    try:
        data = json.loads(raw)
    except Exception:
        # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏•‡πâ‡∏ß‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏î‡∏¥‡∏ö‡πÑ‡∏ß‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å
        raise ValueError(f"Model did not return pure JSON:\n{raw}")

    # normalize ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    try:
        data["date"] = dparse.parse(str(data.get("date"))).date().isoformat()
    except Exception:
        pass
    return data

def save_to_supabase(rec: dict) -> bool:  # save at supabase
    payload = {                           # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ payload ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á schema ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á receipt ‡πÉ‡∏ô supabase
        "date": rec.get("date"),          # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏î ‡∏•‡∏∏‡πâ‡∏ô‡∏à‡∏±‡∏î‡πÄ‡∏î‡πâ‡∏≠
        "vendor": rec.get("vendor"),
        "total": rec.get("total"),
        "subtotal": rec.get("subtotal"),
        "tax": rec.get("tax"),
        "currency": rec.get("currency", "THB"),
        "items_json": rec.get("items", []),       # items_json ‡πÄ‡∏Å‡πá‡∏ö items ‡∏ó‡∏±‡πâ‡∏á array ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå JSONB
        "user_id": rec.get("user_id", ""),
        "raw_text": "",  # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ LLM ‡∏ï‡∏£‡∏á ‡πÜ
    }
    try:
        res = sb.table("receipts").insert(payload).execute()
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
        st.write("Insert result:", res.data)
        return bool(res.data)
    except Exception as e:
        st.error("Insert failed:")
        st.exception(e)  # ‡πÇ‡∏ä‡∏ß‡πå stacktrace/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Supabase
        return False        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏´‡∏°

def get_period_range(kind: str):          # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    today = datetime.utcnow().date()
    if kind == "daily":
        start, end = today, today
    elif kind == "weekly":
        start = today - timedelta(days=6)
        end = today
    else:  # monthly
        start = today.replace(day=1)
        end = today
    return start, end

def query_summary(kind: str, user_id: str | None = None) -> pd.DataFrame:   # ‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å Supabase
    start, end = get_period_range(kind)
    q = sb.table("receipts").select("*").gte("date", str(start)).lte("date", str(end)).order("date", desc=False)
    if user_id:
        q = q.eq("user_id", user_id)
    rows = q.execute().data or []
    df = pd.DataFrame(rows)
    if df.empty:
        return df
    if "date" in df.columns:
        df["date"] = pd.to_datetime(df["date"], errors="coerce")
    for col in ["total","subtotal","tax"]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")
    return df

# ---------- UI: Upload ----------
st.subheader("üì• Upload")
col1, col2 = st.columns([2,1])
with col1:
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", type=["jpg","jpeg","png","webp"])
with col2:
    user_id = st.text_input("User ID (optional)", value="")

if uploaded:
    st.image(uploaded, caption="Uploaded Receipt", use_column_width=True)
    if st.button("Process Receipt"):
        try:
            with st.spinner("Extracting with GPT-4o..."):
                data = vision_extract_json(uploaded.getvalue(), uploaded.type)
                data["user_id"] = user_id
            st.session_state["pending_receipt"] = data
            st.success("‚úÖ Extracted")
            st.subheader("üìë Extracted Data")
            st.json(data)
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î JSON ‡πÑ‡∏î‡πâ: {e}")

            """
‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ + ‡πÉ‡∏™‡πà user_id (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ preview

‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Process:

‡πÄ‡∏£‡∏µ‡∏¢‡∏Å vision_extract_json(...)

‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô st.session_state["pending_receipt"] (‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏° interaction ‡πÑ‡∏î‡πâ)

‡πÇ‡∏ä‡∏ß‡πå JSON ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            """

# ---------- UI: Confirm & Save ----------
st.subheader("‚úÖ Confirm & Save")
pending = st.session_state.get("pending_receipt")
if not pending:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏Å‡∏î Process ‡∏Å‡πà‡∏≠‡∏ô)")
else:
    # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    edited_total = st.number_input("total", value=float(pending.get("total", 0) or 0.0))
    pending["total"] = edited_total
    if st.button("Save to Supabase"):
        ok = save_to_supabase(pending)
        if ok:
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà Supabase")
            st.session_state.pop("pending_receipt", None)
        else:
            st.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏≤‡∏£‡∏≤‡∏á/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô Supabase")

# ---------- UI: Summary ----------
st.subheader("üìä Summary")
period = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["daily", "weekly", "monthly"], index=2)
filter_user = st.text_input("Filter user_id (optional)", value="")
if st.button("Get Summary"):
    df = query_summary(period, filter_user or None)
    if df.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ")
    else:
        total = float(df["total"].sum()) if "total" in df.columns else 0.0
        start, end = get_period_range(period)
        st.write(f"‡∏ä‡πà‡∏ß‡∏á: {start} ‚Äì {end} | ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {len(df)}")
        st.metric("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (THB)", f"{total:,.2f}")
        if "date" in df.columns and "total" in df.columns:
            daily = df.groupby(df["date"].dt.date)["total"].sum()
            st.line_chart(daily)
        st.dataframe(df)
"""
‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pending_receipt ‡πÉ‡∏ô session ‚Üí ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç total ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü

‡∏Å‡∏î Save ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å save_to_supabase ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
"""